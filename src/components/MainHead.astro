---
import '../styles/global.css';


interface Props {
	title?: string | undefined;
    date?: Date;
    author?: string | undefined;
	description?: string | undefined;
	logo?: string | undefined;
	remote_logo?: string | undefined;
	og_url?: string | undefined;

}
const currentPath = Astro.url.pathname;

const {
	title = 'Senior Software Developer',
    date = new Date(),
    author ='Stefan â™¥',
	description = 'Are you seeking a senior software developer for hire in London? Look no further! I can bring your web dreams to life #Developer #London #Available #Hire',
	logo = '/assets/logo.svg',
    remote_logo = 'https://raw.githubusercontent.com/saturnphp/logos/main/CornatulLogo-Centered.png',
    og_url = 'https://izdrail.com' + currentPath
} = Astro.props;

console.log(og_url);
---

<title>{title} - izdrail.com</title>
<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />


<!-- Share !-->
<meta property="og:locale" content="en_GB">
<meta property="og:title" content={title}>
<meta property="og:description" content={description}>
<meta property="og:site_name" content={title}>
<meta property="og:image" content={remote_logo}>
<meta property="og:url" content={og_url}>
<meta property="og:article:author" content={author}>

<meta property="og:type" content="website" />

<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@thephpteacher" />
<meta name="twitter:creator" content="@thephpteacher" />


<meta name="bingbot" content="noarchive" />

<link rel="icon" type="image/svg+xml" href="/assets/logo.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>


<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
